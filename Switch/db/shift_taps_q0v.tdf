--altshift_taps CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="STRATIXIV" NUMBER_OF_TAPS=1 POWER_UP_STATE="DONT_CARE" TAP_DISTANCE=4 WIDTH=8 clock shiftin taps ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 15.1 cbx_altdpram 2016:02:01:19:04:59:SJ cbx_altera_syncram 2016:02:01:19:04:59:SJ cbx_altera_syncram_nd_impl 2016:02:01:19:04:59:SJ cbx_altshift_taps 2016:02:01:19:04:59:SJ cbx_altsyncram 2016:02:01:19:04:59:SJ cbx_cycloneii 2016:02:01:19:04:59:SJ cbx_lpm_add_sub 2016:02:01:19:04:59:SJ cbx_lpm_compare 2016:02:01:19:04:59:SJ cbx_lpm_counter 2016:02:01:19:04:59:SJ cbx_lpm_decode 2016:02:01:19:04:59:SJ cbx_lpm_mux 2016:02:01:19:04:59:SJ cbx_mgl 2016:02:01:19:07:00:SJ cbx_nadder 2016:02:01:19:04:59:SJ cbx_stratix 2016:02:01:19:05:00:SJ cbx_stratixii 2016:02:01:19:05:00:SJ cbx_stratixiii 2016:02:01:19:05:00:SJ cbx_stratixv 2016:02:01:19:05:00:SJ cbx_util_mgl 2016:02:01:19:04:59:SJ  VERSION_END


-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION altsyncram_2s91 (address_a[1..0], address_b[1..0], clock0, clock1, clocken0, clocken1, data_a[7..0], wren_a)
RETURNS ( q_b[7..0]);
FUNCTION cntr_4lf (clk_en, clock)
RETURNS ( q[1..0]);

--synthesis_resources = lut 4 ram_bits (AUTO) 32 reg 4 
SUBDESIGN shift_taps_q0v
( 
	clock	:	input;
	shiftin[7..0]	:	input;
	shiftout[7..0]	:	output;
	taps[7..0]	:	output;
) 
VARIABLE 
	altsyncram4 : altsyncram_2s91;
	dffe3a[1..0] : dffe;
	add_sub2_dataa[1..0]	:	WIRE;
	add_sub2_datab[1..0]	:	WIRE;
	add_sub2_result[1..0]	:	WIRE;
	cntr1 : cntr_4lf;
	clken	: NODE;
	rdaddress[1..0]	: WIRE;

BEGIN 
	altsyncram4.address_a[] = cntr1.q[];
	altsyncram4.address_b[] = rdaddress[];
	altsyncram4.clock0 = clock;
	altsyncram4.clock1 = clock;
	altsyncram4.clocken0 = clken;
	altsyncram4.clocken1 = clken;
	altsyncram4.data_a[] = ( shiftin[]);
	altsyncram4.wren_a = B"1";
	dffe3a[].clk = clock;
	dffe3a[].d = ( (! add_sub2_result[1..1]), add_sub2_result[0..0]);
	dffe3a[].ena = clken;
	add_sub2_result[] = add_sub2_dataa[] + add_sub2_datab[];
	add_sub2_dataa[] = cntr1.q[];
	add_sub2_datab[] = B"11";
	cntr1.clk_en = clken;
	cntr1.clock = clock;
	clken = VCC;
	rdaddress[] = ( (! dffe3a[1..1].q), dffe3a[0..0].q);
	shiftout[7..0] = altsyncram4.q_b[7..0];
	taps[] = altsyncram4.q_b[];
END;
--VALID FILE
